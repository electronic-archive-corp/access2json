// Generated by CoffeeScript 1.6.3
/*
    Класс для прохода по нужным данным

    Потомок должен определить метод
    process: (state, level, data)
        state - текущее состояние в потоке данных
        level - текущий уровень вложенности данных
        data - данные доступные на этом уровне (при необходимости бОльших или других данных - менять нужно именно в этом классе)

    Как ЭТО работает:
        ключевой метод - точка старта - read (dbPath, Config)
        Подключение к базе
        Считывается первый query из конфига
        Выбираются данные из базы
        По мере выборки данных дергается метод process
        Проходим только по полям которые определены в конфиге - из них и планируется составить будующий result
*/


(function() {
  this.AccessDbReader = (function() {
    AccessDbReader.prototype.ADBR_CREATED = 1;

    AccessDbReader.prototype.ADBR_STARTED = 2;

    AccessDbReader.prototype.ADBR_ARRAY_START = 3;

    AccessDbReader.prototype.ADBR_OBJ_START = 4;

    AccessDbReader.prototype.ADBR_NEXT_OBJ = 5;

    AccessDbReader.prototype.ADBR_ERROR = 6;

    AccessDbReader.prototype.ADBR_OBJ_END = 7;

    AccessDbReader.prototype.ADBR_ARRAY_END = 8;

    AccessDbReader.prototype.ADBR_END = 9;

    AccessDbReader.prototype.ADBR_PROP_NAME = 10;

    AccessDbReader.prototype.ADBR_PROP_VALUE = 11;

    AccessDbReader.prototype.ADBR_NEXT_PROP = 12;

    AccessDbReader.prototype.ADBR_BEFORE_CHILD = 13;

    AccessDbReader.prototype.ADBR_AFTER_CHILD = 14;

    AccessDbReader.conn = null;

    AccessDbReader.curLevel = 0;

    function AccessDbReader() {
      this.process(this.ADBR_CREATED, 0);
    }

    AccessDbReader.prototype.process = function(state, level, data) {};

    AccessDbReader.prototype.template2string = function(t, data) {
      var end, left, right, start;
      if (typeof t !== "string") {
        return t;
      }
      start = t.indexOf("{{");
      if (start < 0) {
        return t;
      }
      start = start + 2;
      end = t.indexOf("}}", start);
      if (end < 0) {
        return t;
      }
      end = end + 2;
      left = t.substr(0, start - 2);
      right = t.substr(end);
      t = data[t.substr(start, end - start - 2)];
      if (typeof t === "string") {
        t = t.replace(/\"/g, "&#34;");
        t = t.replace(/\'/g, "&#39;");
      }
      if (left.length === 0 && right.length === 0) {
        return t;
      }
      t = left + t + right;
      return this.template2string(t, data);
    };

    AccessDbReader.prototype.construct = function(config, data) {
      var SQL, adLockOptimistic, adOpenDynamic, dbRow, field, first, firstProp, i, rs, x;
      SQL = this.template2string(config.query, data);
      rs = new ActiveXObject("ADODB.Recordset");
      adOpenDynamic = 2;
      adLockOptimistic = 3;
      rs.open(SQL, this.conn, adOpenDynamic, adLockOptimistic);
      this.process(this.ADBR_ARRAY_START, this.curLevel, data);
      this.curLevel++;
      if (rs.Fields.Count) {
        if (!rs.bof && !rs.eof) {
          rs.MoveFirst();
          first = true;
          while (!rs.eof) {
            if (!first) {
              this.process(this.ADBR_NEXT_OBJ, this.curLevel, data);
            }
            dbRow = {};
            x = 0;
            while (x < rs.Fields.Count) {
              dbRow[rs.Fields(x).Name] = rs.Fields(x).Value;
              x++;
            }
            this.process(this.ADBR_OBJ_START, this.curLevel, data);
            firstProp = true;
            for (i in config.template) {
              if (!config.template.hasOwnProperty(i)) {
                continue;
              }
              if (!firstProp) {
                this.process(this.ADBR_NEXT_PROP, this.curLevel, data);
              }
              this.process(this.ADBR_PROP_NAME, this.curLevel, i);
              field = config.template[i];
              if (typeof field === "object") {
                this.curLevel++;
                this.process(this.ADBR_BEFORE_CHILD, this.curLevel, data);
                this.construct(field, dbRow);
                this.process(this.ADBR_AFTER_CHILD, this.curLevel, data);
                this.curLevel--;
              } else {
                this.process(this.ADBR_PROP_VALUE, this.curLevel, this.template2string(field, dbRow));
              }
              firstProp = false;
            }
            this.process(this.ADBR_OBJ_END, this.curLevel, data);
            first = false;
            rs.MoveNext();
          }
        }
      }
      this.curLevel--;
      this.process(this.ADBR_ARRAY_END, this.curLevel);
      return rs.close();
    };

    AccessDbReader.prototype.read = function(dbPath, Config) {
      var cs;
      cs = "Provider = Microsoft.Jet.OLEDB.4.0; Data Source = " + dbPath + ";Jet OLEDB:Engine Type=4;Persist Security Info = false";
      this.conn = new ActiveXObject("ADODB.Connection");
      this.conn.open(cs, "", "");
      this.curLevel = 0;
      this.process(this.ADBR_STARTED, 0, Config);
      this.construct(Config, {});
      this.process(this.ADBR_END, 0, Config);
      return this.conn.close();
    };

    return AccessDbReader;

  })();

}).call(this);

/*
//@ sourceMappingURL=accessDbReader.map
*/
