// Generated by CoffeeScript 1.6.3
/*
    Сначала подключаем базовые классы
*/


(function() {
  var A2BsonReader, Access2bson, Fs, a2js, dbReaderFile, programFile, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Fs = new ActiveXObject("Scripting.FileSystemObject");

  this.Folder = Fs.GetParentFolderName(Fs.GetFile(WScript.ScriptFullName)) + "\\";

  programFile = this.Folder + "program.js";

  if (!Fs.FileExists(programFile)) {
    WScript.Echo("program.js file not found");
    WScript.Quit(1);
  }

  dbReaderFile = this.Folder + "accessDbReader.js";

  if (!Fs.FileExists(dbReaderFile)) {
    WScript.Echo("AccessDbReader file not found");
    WScript.Quit(1);
  }

  eval(Fs.OpenTextFile(programFile, 1).ReadAll());

  eval(Fs.OpenTextFile(dbReaderFile, 1).ReadAll());

  /*
      ОК. Базовые классы теперь доступны.
  
      A2BsonReader складывает данные в одну строчку на обьект для обьектов первого уровня конфига
      Разделение между обьектами - новая строка
  */


  A2BsonReader = (function(_super) {
    __extends(A2BsonReader, _super);

    A2BsonReader.OutFile = null;

    function A2BsonReader(out, p) {
      this.OutFile = out;
    }

    A2BsonReader.prototype.log = function(str) {
      var t;
      t = void 0;
      if (typeof str === "undefined") {
        t = "undefined";
      } else if (str === null) {
        t = "null";
      } else {
        t = str;
      }
      if (this.OutFile) {
        return this.OutFile.Write(t);
      } else {
        return WScript.StdOut.Write(t);
      }
    };

    A2BsonReader.prototype.process = function(state, level, data) {
      switch (state) {
        case this.ADBR_ARRAY_START:
          if (level !== 0) {
            return this.log("[");
          }
          break;
        case this.ADBR_ARRAY_END:
          if (level !== 0) {
            return this.log("]");
          }
          break;
        case this.ADBR_OBJ_START:
          return this.log("{");
        case this.ADBR_OBJ_END:
          return this.log("}");
        case this.ADBR_NEXT_OBJ:
          this.log(",");
          if (level === 1) {
            return this.log("\n");
          }
          break;
        case this.ADBR_NEXT_PROP:
          return this.log(",");
        case this.ADBR_PROP_NAME:
          return this.log('"' + data + '":');
        case this.ADBR_PROP_VALUE:
          return this.log(JSON.stringify(data));
      }
    };

    return A2BsonReader;

  })(AccessDbReader);

  /*
      Используем общую часть (инициализацию описанную в классе Program )
      Готовим новый файл (затираем существующий) в который будем складывать результат
      Используем A2BsonReader для представления данных
  */


  Access2bson = (function(_super) {
    __extends(Access2bson, _super);

    function Access2bson() {
      _ref = Access2bson.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Access2bson.prototype.prepareOutFile = function() {
      var f;
      f = this.Folder + "a2bson_result.json";
      return this.OutFile = Fs.CreateTextFile(f, 8, true);
    };

    Access2bson.prototype.run = function() {
      var e, r;
      try {
        r = new A2BsonReader(this.OutFile);
        return r.read(this.dbPath, this.Config);
      } catch (_error) {
        e = _error;
        WScript.Echo(e.name + "\n\n" + e.description);
        return WScript.Quit(2);
      }
    };

    return Access2bson;

  })(Program);

  a2js = new Access2bson();

  a2js.run();

}).call(this);

/*
//@ sourceMappingURL=access2bson.map
*/
